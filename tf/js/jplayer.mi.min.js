window._MiPlayer = {}, _MiPlayer = {
	version: "1.0",
	init: function(e, t) {
		this.$player = e, this.event = t, this.$gui = $(this.event.jPlayer.options.cssSelectorAncestor).find(".jp-gui"), this.$controller = $(this.event.jPlayer.options.cssSelectorAncestor).find(".jp-interface"), this.$progress = this.$controller.find(".jp-progress"), this.$progressPlay = this.$controller.find(".jp-play-bar"), this.$progressPoint = this.$controller.find(".jp-progress-point"), this.$mute = this.$controller.find(".jp-mute"), this.$volumeBar = this.$controller.find(".jp-volume-bar"), this.$volumeBarValue = this.$controller.find(".jp-volume-bar-value"), this.$volumePoint = this.$controller.find(".jp-volume-point"), this.$playBtn = $(this.event.jPlayer.options.cssSelector.videoPlay), this.currentTime = this.event.jPlayer.status.currentTime, this.hideControllerSpeed = 3e3, this.progressDraging = !1, this.event.jPlayer.flash.used || this.dragProgress(), this.showController(), this.$playBtn.show(), this.updateVolume(this.event.jPlayer.options.volume), this.dragVolume(), this.checkFullscreen()
	},
	play: function() {
		this.$playBtn.hide(), this.hideController(), this.event.jPlayer.flash.used || this.$progressPoint.show()
	},
	pause: function() {
		this.progressDraging || this.$playBtn.show(), this.showController()
	},
	ended: function() {
		this.$playBtn.show(), this.$progressPoint.hide().css({
			left: 0
		}), this.showController()
	},
	hideController: function() {
		var e = this;
		e.hideControllerTimer && clearTimeout(e.hideControllerTimer), e.hideControllerTimer = setTimeout(function() {
			e.$controller.addClass("jp-controller-hide")
		}, e.hideControllerSpeed), e.$player.off(".toggleController").on("mousemove.toggleController", function() {
			e.showController()
		}).on("mouseleave.toggleController", function() {
			e.hideController()
		}), e.$controller.off(".toggleController").on("mousemove.toggleController", function() {
			e.showController()
		}).on("mouseleave.toggleController", function() {
			e.hideController()
		})
	},
	showController: function() {
		var e = this;
		e.hideControllerTimer && clearTimeout(e.hideControllerTimer), e.$controller.removeClass("jp-controller-hide")
	},
	dragProgress: function() {
		var e = this,
			t = e.$progress.width(),
			o = e.$progressPlay.width(),
			r = e.event.jPlayer.status.duration,
			l = 0,
			s = 0,
			i = 0;
		$(document).off(".jplayerpp").on("mousedown.jplayerpp", ".jp-progress-point", function(t) {
			e.progressDraging || (e.progressDraging = !0, l = $(this).offset().left, o = e.$progressPlay.width(), e.$player.jPlayer("pause", e.currentTime))
		}).on("mousemove.jplayerpp", function(r) {
			e.progressDraging && (s = r.pageX - l, i = (o + s) / t, e.updateProgress(o + s))
		}).on("mouseup.jplayerpp", function(t) {
			e.progressDraging && (e.progressDraging = !1, e.$player.jPlayer("play", i * r))
		})
	},
	updateProgress: function(e) {
		var t = this.$progress.width(),
			o = this.$progressPoint.width(),
			r = this.$progressPlay.width(),
			l = e ? e : r;
		r <= o / 2 ? l = 0 : r >= t - o && (l = t - o), this.$progressPoint.css({
			left: l / t * 100 + "%"
		}), e && this.$progressPlay.css({
			width: l / t * 100 + "%"
		})
	},
	volumeChange: function(e) {
		var t = Math.floor(10 * e);
		t < 1 ? this.$player.jPlayer("mute", !0) : this.$player.jPlayer("mute", !1), t <= 5 ? this.$mute.addClass("jp-volume-small") : this.$mute.removeClass("jp-volume-small"), this.updateVolume(e)
	},
	dragVolume: function() {
		var e = this,
			t = e.$volumeBar.width(),
			o = e.$volumeBarValue.width(),
			r = this.$volumePoint.width(),
			l = (e.event.jPlayer.options.volume, 0),
			s = 0,
			i = 0,
			n = !1;
		$(document).off(".jplayervp").on("mousedown.jplayervp", ".jp-volume-point", function(t) {
			n || (n = !0, l = $(this).offset().left, o = e.$volumeBarValue.width())
		}).on("mousemove.jplayervp", function(u) {
			n && (s = u.pageX - l, i = (o + s - r / 2) / t, i >= 0 && i <= 1 && (e.updateVolume(i), e.$player.jPlayer("volume", i)))
		}).on("mouseup.jplayervp", function(e) {
			n && (n = !1)
		})
	},
	updateVolume: function(e) {
		var t = this.$volumeBar.width(),
			o = this.$volumePoint.width(),
			r = this.$volumeBarValue.width(),
			l = r * e,
			s = o / 2 / t;
		r <= o / 2 ? l = 0 : r >= t - o && (l = t - o), e > 1 || e < 0 || (this.$volumePoint.show().css({
			left: 100 * (e - s) + "%"
		}), this.$volumeBarValue.css({
			width: 100 * e + "%"
		}))
	},
	checkFullscreen: function() {
		if (this.inIframe = function() {
				return self !== top
			}(), this.supportFs = this.supportFullscreen(), this.inIframe && !this.supportFs) {
			document.domain = "mi.com";
			var e = !1;
			try {
				e = !!window.parent.document.domain
			} catch (t) {
				e = !1
			}
			e || this.$controller.find(".jp-toggles").hide()
		}
	},
	resize: function(e) {
		if (this.inIframe && !this.supportFs) {
			var t = $(window.parent.document).find("#miPlayerIframe");
			if (!t.length) return;
			e ? t.css({
				position: "fixed",
				top: 0,
				left: 0,
				width: "100%",
				height: "100%",
				"z-index": 9999
			}) : t.removeAttr("style")
		}
	},
	supportFullscreen: function() {
		var e, t, o, r = document,
			l = r.createElement("video"),
			s = {
				w3c: ["fullscreenEnabled", "fullscreenElement", "requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenerror"],
				moz: ["mozFullScreenEnabled", "mozFullScreenElement", "mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozfullscreenerror"],
				webkit: ["", "webkitCurrentFullScreenElement", "webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", ""],
				webkitVideo: ["webkitSupportsFullscreen", "webkitDisplayingFullscreen", "webkitEnterFullscreen", "webkitExitFullscreen", "", ""],
				ms: ["", "msFullscreenElement", "msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "MSFullscreenError"]
			},
			i = ["w3c", "moz", "webkit", "webkitVideo", "ms"],
			n = !1;
		for (e = {
				support: {
					w3c: !!r[s.w3c[0]],
					moz: !!r[s.moz[0]],
					webkit: "function" == typeof r[s.webkit[3]],
					webkitVideo: "function" == typeof l[s.webkitVideo[2]],
					ms: "function" == typeof l[s.ms[2]]
				}
			}, t = 0, o = i.length; t < o; t++) {
			var u = i[t];
			if (e.support[u]) {
				n = !0;
				break
			}
		}
		return n
	},
	setup: function(e) {
		var t = this,
			o = {
				title: "",
				vurl: "",
				vid: "",
				poster: "",
				width: 880,
				height: 536,
				solution: "html, flash",
				supplied: "m4v",
				auto: "0"
			},
			r = $.extend(o, e);
		$("#J_miPlayerWrapper").css({
			width: r.width + "px",
			height: r.height + "px"
		}), r.vurl && $("#J_miPlayer").jPlayer({
			ready: function(e) {
				$(this).jPlayer("setMedia", {
					title: r.title,
					m4v: r.vurl,
					poster: r.poster
				}), t.init($(this), e), "1" === r.auto && $(this).jPlayer("play")
			},
			play: function(e) {
				e.jPlayer.status.currentTime <= 0 && t.init($(this), e), t.play()
			},
			pause: function(e) {
				t.pause()
			},
			ended: function(e) {
				t.ended()
			},
			click: function(e) {
				e.jPlayer.status.paused ? $(this).jPlayer("play") : $(this).jPlayer("pause")
			},
			timeupdate: function(e) {
				e.jPlayer.status.currentTime > 0 && t.updateProgress(), t.currentTime = e.jPlayer.status.currentTime
			},
			volumechange: function(e) {
				t.volumeChange(e.jPlayer.options.volume)
			},
			resize: function(e) {
				e.jPlayer.status.currentTime >= 0 && t.resize(e.jPlayer.options.fullScreen)
			},
			cssSelectorAncestor: "#J_miPlayerWrapper",
			swfPath: "jplayer",
			solution: r.solution,
			supplied: r.supplied,
			size: {
				width: r.width + "px",
				height: r.height + "px"
			},
			volume: .6,
			smoothPlayBar: !1,
			useStateClassSkin: !0,
			keyEnabled: !0,
			autohide: {
				hold: 3e3
			},
			keyBindings: {
				play: {
					key: 32,
					fn: function(e) {
						e.status.paused ? e.play() : e.pause()
					}
				},
				volumeUp: {
					key: 38,
					fn: function(e) {
						e.volume(e.options.volume + .1), t.volumeChange(e.options.volume + .1), e.flash.used || (t.showController(), t.hideController())
					}
				},
				volumeDown: {
					key: 40,
					fn: function(e) {
						e.volume(e.options.volume - .1), t.volumeChange(e.options.volume - .1), e.flash.used || (t.showController(), t.hideController())
					}
				},
				fullScreen: {
					key: 27,
					fn: function(e) {
						e.status.video && e.options.fullScreen && e._setOption("fullScreen", !e.options.fullScreen)
					}
				}
			}
		})
	}
};